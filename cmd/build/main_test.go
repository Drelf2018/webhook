package main_test

import (
	"encoding/json"
	"os"
	"strconv"
	"strings"
	"testing"

	"github.com/Drelf2018/initial"
	"github.com/Drelf2018/webhook/config"
)

type AutoGenerated struct {
	FixedFileInfo struct {
		FileVersion struct {
			Major int64
			Minor int64
			Patch int64
			Build int64
		}
		FileFlagsMask string `default:"3f"`
		FileFlags     string `default:"00"`
		FileOS        string `default:"040004"`
		FileType      string `default:"01"`
		FileSubType   string `default:"00"`
	}
	StringFileInfo struct {
		Comments         string `default:"分布式博文收集广播终端"`
		FileDescription  string `default:"分布式博文收集广播终端"`
		ProductVersion   string
		LegalCopyright   string `default:"Copyright © 2023-2024 Drelf2018"`
		OriginalFilename string `default:"webhook"`
		ProductName      string `default:"分布式博文收集广播终端"`
	}
	VarFileInfo struct {
		Translation struct {
			LangID    string `default:"0804"`
			CharsetID string `default:"04B0"`
		}
	}
}

func convert(s string) (i int64) {
	i, _ = strconv.ParseInt(s, 10, 64)
	return
}

func (a *AutoGenerated) BeforeDefault() {
	a.StringFileInfo.ProductName = config.VERSION
	s := strings.Split(config.VERSION[1:], ".")
	a.FixedFileInfo.FileVersion.Major = convert(s[0])
	a.FixedFileInfo.FileVersion.Minor = convert(s[1])
	a.FixedFileInfo.FileVersion.Patch = convert(s[2])
}

func TestGenerate(t *testing.T) {
	versioninfo := initial.Default(&AutoGenerated{})
	b, err := json.MarshalIndent(versioninfo, "", "\t")
	if err != nil {
		t.Fatal(err)
	}
	err = os.WriteFile("versioninfo.json", b, os.ModePerm)
	if err != nil {
		t.Fatal(err)
	}
}
