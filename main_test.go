package webhook_test

import (
	"encoding/json"
	"os"
	"strconv"
	"strings"
	"testing"

	"github.com/Drelf2018/initial"
	"github.com/Drelf2018/webhook/api"
)

type AutoGenerated struct {
	FixedFileInfo struct {
		FileVersion struct {
			Major int64 `json:"Major"`
			Minor int64 `json:"Minor"`
			Patch int64 `json:"Patch"`
			Build int64 `json:"Build"`
		} `json:"FileVersion"`
		FileFlagsMask string `json:"FileFlagsMask" default:"3f"`
		FileFlags     string `json:"FileFlags" default:"00"`
		FileOS        string `json:"FileOS" default:"040004"`
		FileType      string `json:"FileType" default:"01"`
		FileSubType   string `json:"FileSubType" default:"00"`
	} `json:"FixedFileInfo" default:"initial.Default"`
	StringFileInfo struct {
		Comments         string `json:"Comments" default:"一种分布式收集博文并广播的工具"`
		FileDescription  string `json:"FileDescription" default:"一种分布式收集博文并广播的工具"`
		ProductVersion   string `json:"ProductVersion"`
		LegalCopyright   string `json:"LegalCopyright" default:"Copyright (c) 2023 Drelf2018"`
		OriginalFilename string `json:"OriginalFilename" default:"webhook"`
		ProductName      string `json:"ProductName" default:"博文收集终端"`
	} `json:"StringFileInfo" default:"initial.Default"`
	VarFileInfo struct {
		Translation struct {
			LangID    string `json:"LangID" default:"0804"`
			CharsetID string `json:"CharsetID" default:"04B0"`
		} `json:"Translation" default:"initial.Default"`
	} `json:"VarFileInfo" default:"initial.Default"`
	IconPath     string `json:"IconPath" default:"icon.ico"`
	ManifestPath string `json:"ManifestPath"`
}

func TestGenerate(t *testing.T) {
	versioninfo := initial.Default(&AutoGenerated{})
	ver := os.Getenv("webhook")
	versioninfo.StringFileInfo.ProductVersion = ver
	for i, n := range strings.Split(strings.ReplaceAll(ver, "v", ""), ".") {
		idx, _ := strconv.ParseInt(n, 10, 64)
		switch i {
		case 0:
			versioninfo.FixedFileInfo.FileVersion.Major = idx
		case 1:
			versioninfo.FixedFileInfo.FileVersion.Minor = idx
		case 2:
			versioninfo.FixedFileInfo.FileVersion.Patch = idx
		}
	}
	b, _ := json.MarshalIndent(versioninfo, "", "\t")
	os.WriteFile("cmd/build/versioninfo.json", b, os.ModePerm)
	api.Shell("go generate", "cmd/build")
}
